time:
  - platform: sntp
    timezone: Europe/Kyiv
    servers:
     - 192.168.88.10

interval:
  - interval: 10s
    then:
      - lambda: "id(must).update();"

uart:
  - id: must_uart
    tx_pin: ${must_tx_pin}
    rx_pin: ${must_rx_pin}
    baud_rate: 19200
    stop_bits: 1
    parity: NONE
    data_bits: 8

modbus:
  id: mod_bus_must
  uart_id: must_uart
  send_wait_time: 350ms

modbus_controller:
  - id: must
    address: 0x4
    modbus_id: mod_bus_must
    setup_priority: -10
    update_interval: never

wifi:
  networks:
    manual_ip:
      static_ip: 192.168.88.142
      gateway: 192.168.88.1
      subnet: 255.255.255.0

switch:
  - platform: template
    name: "Use customer limits for battery discharge"
    id: limits_enabled
    optimistic: True
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: "SysSet[07]: Overload Restart Forbid"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,0)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 1;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 1;

  - platform: template
    name: "SysSet[08]: Overtemp Restart Forbid"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,1)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 2;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 2;

  - platform: template    
    name: "SysSet[06]: Overload Bypass Forbid"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,2)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 4;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 4;

  - platform: template
    name: "SysSet[22]: Forbid Page turn"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,3)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 8;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 8;

  - platform: template
    name: "SysSet: Grid Buzz Enable"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,4)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 16;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 16  ;

  - platform: template
    name: "SysSet: Buzz Forbid"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,5)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 32;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 32  ;

  - platform: template
    name: "SysSet[23]: LCD light"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,6)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 64;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 64;

  - platform: template
    name: "SysSet[27]: Record Fault Forbid"
    lambda: uint16_t settings = id(system_settings).state; if (bitRead(settings,7)) { return true; } else { return false; }
    turn_on_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state + 128;
    turn_off_action:
       - number.set:
          id: system_settings
          value: !lambda return id(system_settings).state - 128;

binary_sensor:
  # CE: - Charger Errors from 15213 (id:charger_error_message))
  - platform: template
    name: "CE: Charger hardware protection"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,0)) { return true; } else { return false; }

  - platform: template
    name: "CE: Over current"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,1)) { return true; } else { return false; }

  - platform: template
    name: "CE: Current sensor error"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,2)) { return true; } else { return false; }

  - platform: template
    name: "CE: Over temperature"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,3)) { return true; } else { return false; }

  - platform: template
    name: "CE: PV voltage is too high"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,4)) { return true; } else { return false; }

  - platform: template
    name: "CE: PV voltage is too low"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,5)) { return true; } else { return false; }

  - platform: template
    name: "CE: Battery voltage is too high"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,6)) { return true; } else { return false; }

  - platform: template
    name: "CE: Battery voltage is too low"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,7)) { return true; } else { return false; }

  - platform: template
    name: "CE: Current is uncontrollable"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,8)) { return true; } else { return false; }

  - platform: template
    name: "CE: Parameter error"
    lambda: uint16_t error = id(charger_error_message).state; if (bitRead(error,9)) { return true; } else { return false; }

  # CW: - Charger Warnings from 15214 (id:charger_warning_message))
  - platform: template
    name: "CW: Fan error"
    lambda: uint16_t warning = id(charger_warning_message).state; if (bitRead(warning,0)) { return true; } else { return false; }

  # IE: - Inverter Errors from 25261 (id(inverter_error_message_1))
  - platform: template
    name: "IE: Fan is locked when inverter is off"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,0)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter transformer over temperature"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,1)) { return true; } else { return false; }

  - platform: template
    name: "IE: Battery voltage is too high"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,2)) { return true; } else { return false; }

  - platform: template
    name: "IE: Battery voltage is too low"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,3)) { return true; } else { return false; }

  - platform: template
    name: "IE: Output short circuited"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,4)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter output voltage is high"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,5)) { return true; } else { return false; }

  - platform: template
    name: "IE: Overload time out"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,6)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter bus voltage is too high"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,7)) { return true; } else { return false; }

  - platform: template
    name: "IE: Bus soft start failed"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,8)) { return true; } else { return false; }

  - platform: template
    name: "IE: Main relay failed"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,9)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter output voltage sensor error"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,10)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid voltage sensor error"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,11)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter output current sensor error"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,12)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid current sensor error"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,13)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter load current sensor error"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,14)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid over current error"
    lambda: uint16_t error = id(inverter_error_message_1).state; if (bitRead(error,15)) { return true; } else { return false; }

  # IE: - Inverter Errors from 25262 (id(inverter_error_message_2))
  - platform: template
    name: "IE: Inverter radiator over temperature"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,0)) { return true; } else { return false; }

  - platform: template
    name: "IE: Solar charger battery voltage class error"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,1)) { return true; } else { return false; }

  - platform: template
    name: "IE: Solar charger current sensor error"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,2)) { return true; } else { return false; }

  - platform: template
    name: "IE: Solar charger current is uncontrollable"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,3)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid voltage is low"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,4)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid voltage is high"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,5)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid under frequency"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,6)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter grid over frequency"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,7)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter over current protection error"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,8)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter bus voltage is too low"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,9)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter soft start failed"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,10)) { return true; } else { return false; }

  - platform: template
    name: "IE: Over DC voltage in AC output"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,11)) { return true; } else { return false; }

  - platform: template
    name: "IE: Battery connection is open"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,12)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter control current sensor error"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,13)) { return true; } else { return false; }

  - platform: template
    name: "IE: Inverter output voltage is too low"
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,14)) { return true; } else { return false; }

  - platform: template
    name: "IE: "
    lambda: uint16_t error = id(inverter_error_message_2).state; if (bitRead(error,15)) { return true; } else { return false; }

  # IW: - Inverter Warnings from 25265 (id(inverter_warning_message_1))
  - platform: template
    name: "IW: Fan is locked when inverter is on"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,0)) { return true; } else { return false; }

  - platform: template
    name: "IW: Fan2 is locked when inverter is on"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,1)) { return true; } else { return false; }

  - platform: template
    name: "IW: Battery is over-charged"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,2)) { return true; } else { return false; }

  - platform: template
    name: "IW: Low battery"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,3)) { return true; } else { return false; }

  - platform: template
    name: "IW: Overload"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,4)) { return true; } else { return false; }

  - platform: template
    name: "IW: Output power derating"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,5)) { return true; } else { return false; }

  - platform: template
    name: "IW: Solar charger stops due to low battery"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,6)) { return true; } else { return false; }

  - platform: template
    name: "IW: Solar charger stops due to high PV voltage"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,7)) { return true; } else { return false; }

  - platform: template
    name: "IW: Solar charger stops due to over load"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,8)) { return true; } else { return false; }

  - platform: template
    name: "IW: Solar charger over temperature"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,9)) { return true; } else { return false; }

  - platform: template
    name: "IW: PV charger communication error"
    lambda: uint16_t warning = id(inverter_error_message_1).state; if (bitRead(warning,10)) { return true; } else { return false; }


sensor:

#  - platform: modbus_controller
#    address: 10111
#    name: "Battery Ah"
#    unit_of_measurement: "Ah"
#    register_type: holding

  - platform: modbus_controller
    address: 113
    name: "State of Charge"
    unit_of_measurement: "%"
    register_type: holding
    id: soc
    on_value:
      - if:
          condition:
            lambda: return (x<id(discharge_margin).state and id(limits_enabled).state);
          then:
            - select.set_index:
                id: energy_use_mode
                index: 1  # SUB
          else:
            if:
              condition: 
                lambda: return (x>id(discharge_margin).state+10 and id(limits_enabled).state);
              then:
                - select.set_index:
                    id: energy_use_mode
                    index: 0  # SBU

  - platform: modbus_controller
    address: 15201
    name: "Charger workstate"
    register_type: holding
    icon: mdi:battery-charging-50

  - platform: modbus_controller
    address: 15202
    name: "MPPT state"
    register_type: holding

  - platform: modbus_controller
    address: 15203
    name: "Charging state"
    register_type: holding

  - platform: modbus_controller
    id: inverter_error_message_1
    address: 25261
#    name: "Inverter Error message 1"
    register_type: holding
    internal: true

  - platform: modbus_controller
    id: inverter_error_message_2
    address: 25262
#    name: "Inverter Error message 2"
    register_type: holding
    internal: true

  - platform: modbus_controller
    id: inverter_error_message_3
    address: 25263
#    name: "Inverter Error message 3"
    register_type: holding
    internal: true

  - platform: modbus_controller
    id: inverter_warning_message_1
    address: 25265
#    name: "Inverter Warning message 1"
    register_type: holding
    internal: true

  - platform: modbus_controller
    id: inverter_warning_message_2
    address: 25266
#    name: "Inverter Warning message 2"
    register_type: holding
    internal: true

  - platform: modbus_controller
    id: charger_error_message
    address: 15213
    bitmask: 0x3ff 
#    name: "Charger Error message"
    register_type: holding
    internal: true

  - platform: modbus_controller
    id: charger_warning_message
    address: 15214
#    name: "Charger Warning message"
    register_type: holding
    internal: true

  - platform: modbus_controller
    address: 15205
    name: "PV1 voltage"
    register_type: holding
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 16205
    name: "PV2 voltage"
    register_type: holding
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 15206
    name: "Battery voltage (charger side)"
    register_type: holding
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 15207
    name: "PV1 Charger Current"
    register_type: holding
    unit_of_measurement: "A"
    accuracy_decimals: 1
    icon: mdi:current-dc
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 16207
    name: "PV2 Charger Current"
    register_type: holding
    unit_of_measurement: "A"
    accuracy_decimals: 1
    icon: mdi:current-dc
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 15208
    register_type: holding
    name: "PV1 Charger power"
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 1
    icon: mdi:solar-power-variant-outline

  - platform: modbus_controller
    address: 16208
    register_type: holding
    name: "PV2 Charger power"
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 1
    icon: mdi:solar-power-variant-outline

  - platform: modbus_controller
    address: 15211
    register_type: holding
    name: "Battery Relay"
  - platform: modbus_controller
    address: 15212
    register_type: holding
    name: "PV Relay"
    icon: mdi:electric-switch

  - platform: modbus_controller
    address: 15217
    register_type: holding
    # name: "Accumulated charger power MWh"
    id: charger_total_mwh
    internal: true

  - platform: modbus_controller
    address: 15218
    register_type: holding
    # name: "Accumulated charger power kWh"
    id: charger_total_kwh
    internal: true
    filters:
      multiply: 0.1

  - platform: template
    name: "Accumulated charger power"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    lambda: |-
     return (id(charger_total_mwh).state * 1000.0 + id(charger_total_kwh).state );
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25201
    register_type: holding
    name: "Inverter Work state"
    icon: mdi:state-machine

  - platform: modbus_controller
    address: 25205
    name: "Battery voltage"
    register_type: holding
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 25206
    name: "Inverter voltage"
    register_type: holding
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 25207
    name: "Grid voltage"
    register_type: holding
    unit_of_measurement: "V"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    filters:
      multiply: 0.1

  - platform: modbus_controller
    address: 25213
    name: "Inverter power"
    register_type: holding
    unit_of_measurement: "W"
    accuracy_decimals: 1
    icon: mdi:sine-wave
    value_type: S_WORD

  - platform: modbus_controller
    address: 25214
    name: "Grid power"
    register_type: holding
    unit_of_measurement: "W"
    accuracy_decimals: 1
    value_type: S_WORD
    icon: mdi:transmission-tower-export

  - platform: modbus_controller
    address: 25215
    name: "Load power"
    register_type: holding
    unit_of_measurement: "W"
    accuracy_decimals: 1
    icon: mdi:home-import-outline

  - platform: modbus_controller
    address: 25216
    name: "System load"
    register_type: holding
    unit_of_measurement: "%"
    accuracy_decimals: 1
    icon: mdi:flash

  - platform: modbus_controller
    address: 25233
    register_type: holding
    name: "AC radiator temp"
    accuracy_decimals: 1
    unit_of_measurement: "°C"

  - platform: modbus_controller
    address: 25234
    register_type: holding
    name: "Transformer temp"
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25235
    register_type: holding
    name: "DC Radiator temp"
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25247
    register_type: holding
    # name: "Accumulated discharger power MWh"
    id: discharger_total_mwh
    internal: true

  - platform: modbus_controller
    address: 25248
    register_type: holding
    # name: "Accumulated discharger power kWh"
    id: discharger_total_kwh
    internal: true
    filters:
      multiply: 0.1

  - platform: template
    name: "Accumulated discharger power"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    lambda: |-
     return (id(discharger_total_mwh).state * 1000.0 + id(discharger_total_kwh).state );
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25245
    register_type: holding
    # name: "Accumulated charger power MWh"
    id: inv_charger_total_mwh
    internal: true

  - platform: modbus_controller
    address: 25246
    register_type: holding
    # name: "Accumulated charger power kWh"
    id: inv_charger_total_kwh
    internal: true
    filters:
      multiply: 0.1

  - platform: template
    name: "Accumulated INV charger power"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    lambda: |-
     return (id(inv_charger_total_mwh).state * 1000.0 + id(inv_charger_total_kwh).state );
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25249
    register_type: holding
    # name: "Accumulated buy power MWh"
    id: buy_mwh
    internal: true

  - platform: modbus_controller
    address: 25250
    register_type: holding
    # name: "Accumulated buy power kWh"
    id: buy_kwh
    internal: true
    filters:
      multiply: 0.1

  - platform: template
    name: "Accumulated buy power"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    lambda: |-
     return (id(buy_mwh).state * 1000.0 + id(buy_kwh).state );
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25251
    register_type: holding
    # name: "Accumulated sell power MWh"
    id: sell_mwh

  - platform: modbus_controller
    address: 25252
    register_type: holding
    # name: "Accumulated sell power kWh"
    id: sell_kwh
    filters:
      multiply: 0.1

  - platform: template
    name: "Accumulated sell power"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    lambda: |-
     return (id(sell_mwh).state * 1000.0 + id(sell_kwh).state );
    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25253
    register_type: holding
    # name: "Accumulated load power MWh"
    id: load_mwh
    internal: true

  - platform: modbus_controller
    address: 25254
    register_type: holding
    # name: "Accumulated load power kWh"
    id: load_kwh
    internal: true
    filters:
      multiply: 0.1

  - platform: template
    name: "Accumulated load power"
    unit_of_measurement: kWh
    device_class: energy
    state_class: total_increasing
    lambda: |-
     return (id(load_mwh).state * 1000.0 + id(load_kwh).state );
    accuracy_decimals: 1

#  - platform: modbus_controller
#    address: 25259
#    register_type: holding
#    # name: "Accumulated grid charge power MWh"
#    id: grid_charge_mwh
#    internal: true

#  - platform: modbus_controller
#    address: 25260
#    register_type: holding
#    # name: "Accumulated grid charge power kWh"
#    id: grid_charge_kwh
#    internal: true
#    filters:
#      multiply: 0.1

#  - platform: template
#    name: "Accumulated grid charge power"
#    unit_of_measurement: kWh
#    device_class: energy
#    state_class: total_increasing
#    lambda: |-
#     return (id(grid_charge_mwh).state * 1000.0 + id(grid_charge_kwh).state );
#    accuracy_decimals: 1

  - platform: modbus_controller
    address: 25273
    register_type: holding
    value_type: S_WORD
    name: "Battery power"
    unit_of_measurement: "W"
    accuracy_decimals: 1
    icon: mdi:battery

  - platform: modbus_controller
    address: 25274
    register_type: holding
    value_type: S_WORD
    name: "Battery current"
    unit_of_measurement: "A"
    accuracy_decimals: 1
    icon: mdi:current-dc

select:
  - platform: modbus_controller
    id: energy_use_mode
    name: "Energy use mode [01]"
    address: 20109
    use_write_multiple: true
    optionsmap:
      "SBU (Solar/battery/utility)": 1
      "SUB (Solar/utility/battery)": 2
      "UTI (Utility only)": 3
      "SOL (Solar only)": 4

  - platform: modbus_controller
    id: charger_source_priority
    name: "Charger source priority [10]"
    address: 20143
    use_write_multiple: true
    optionsmap:
      "CSO (Solar first)": 0        # select index 0
      "SNU (Solar and utility)": 2  # select index 1
      "OSO (Solar only)": 3         # select index 2

  - platform: modbus_controller
    id: solar_use_aim
    name: "Solar Use Aim [09]"
    address: 20112
    optionsmap:
      "LBU (Load, Battery, Utility)": 0        # select index 0
      "BLU (Battery, Load, Utility)": 1        # select index 1

number:
  - platform: template
    name: "Discharge margin"
    id: discharge_margin
    unit_of_measurement: "%"
    min_value: 25
    max_value: 85
    initial_value: 66
    step: 1
    optimistic: true
    restore_value: true
    mode: box

#  - platform: template
#    name: "INV Disable grid charge"
#    id: inv_grid_chg_stop
#    unit_of_measurement: "%"
#    min_value: 76
#    max_value: 95
#    initial_value: 90
#    step: 1
#    restore_value: true
#    optimistic: true
#    mode: box

#  - platform: modbus_controller
#    id: batt_float_voltage
#    name: "Float voltage [18]"
#    unit_of_measurement: "V"
#    address: 10103
#    value_type: U_WORD
#    lambda: "return x * 0.1; "
#    write_lambda: |-
#      return x * 10 ;

  - platform: modbus_controller
    id: batt_ah
    name: "Battery Ah"
    unit_of_measurement: "Ah"
    min_value: 0
    max_value: 900
    step: 1
    address: 10111
    value_type: U_WORD
    use_write_multiple: true
    lambda: "return x; "
    write_lambda: |-
      return x;

#  - platform: modbus_controller
#    id: batt_absorb_voltage
#    name: "Absorb voltage"
#    unit_of_measurement: "V"
#    address: 10104
#    value_type: U_WORD
#    lambda: "return x * 0.1; "
#    write_lambda: |-
#      return x * 10 ;

#  - platform: modbus_controller
#    id: batt_stop_dischg
#    name: "Battery stop discharging voltage"
#    unit_of_measurement: "V"
#    address: 20118
#    value_type: U_WORD
#    lambda: "return x * 0.1; "
#    write_lambda: |-
#      return x * 10 ;

#  - platform: modbus_controller
#    id: batt_stop_chg
#    name: "Battery stop charging voltage"
#    unit_of_measurement: "V"
#    address: 20119
#    value_type: U_WORD
#    lambda: "return x * 0.1; "
#    write_lambda: |-
#      return x * 10 ;

#  - platform: modbus_controller
#    id: batt_low_voltage
#    name: "Battery low voltage"
#    unit_of_measurement: "V"
#    address: 20127
#    value_type: U_WORD
#    lambda: "return x * 0.1; "
#    write_lambda: |-
#      return x * 10 ;

#  - platform: modbus_controller
#    id: batt_high_voltage
#    name: "Battery high voltage"
#    unit_of_measurement: "V"
#    address: 20128
#    value_type: U_WORD
#    lambda: "return x * 0.1; "
#    write_lambda: |-
#      return x * 10 ;

  - platform: modbus_controller
    name: "Max Grid Charger current [13]"
    unit_of_measurement: "A"
    address: 20125
    min_value: 1
    max_value: 50
    value_type: U_WORD
    use_write_multiple: true
    lambda: "return x * 0.1; "
    write_lambda: |-
      return x * 10 ;

  - platform: modbus_controller
    name: "Max Combine Charger current [11]"
    unit_of_measurement: "A"
    address: 20132
    min_value: 10
    max_value: 120
    value_type: U_WORD
    use_write_multiple: true
    lambda: "return x * 0.1; "
    write_lambda: |-
      return x * 10 ;

  - platform: modbus_controller
    id: system_settings
#    name: "System Settings"
    address: 20142
    value_type: U_WORD
    internal: True
    use_write_multiple: true
